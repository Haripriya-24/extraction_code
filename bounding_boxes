import cv2
import numpy as np
from itertools import combinations

# Load image
image = cv2.imread('C:/Users/Lenovo/Pictures/opt/pic1.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Invert and binarize
binary = cv2.adaptiveThreshold(~gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                               cv2.THRESH_BINARY, 15, -2)

# Detect horizontal lines with smaller kernel
horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (25, 1))
horizontal = cv2.erode(binary, horizontal_kernel, iterations=1)
horizontal = cv2.dilate(horizontal, horizontal_kernel, iterations=1)

# Detect vertical lines with smaller kernel
vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 25))
vertical = cv2.erode(binary, vertical_kernel, iterations=1)
vertical = cv2.dilate(vertical, vertical_kernel, iterations=1)

# Combine lines and find intersections
intersections = cv2.bitwise_and(horizontal, vertical)

# Contours around intersection points
contours, _ = cv2.findContours(intersections, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)
points = [cv2.boundingRect(cnt)[0:2] for cnt in contours]

# Cluster points to remove duplicates
def cluster_points(points, threshold=10):
    clustered = []
    for pt in points:
        matched = False
        for group in clustered:
            if abs(pt[0] - group[0][0]) < threshold and abs(pt[1] - group[0][1]) < threshold:
                group.append(pt)
                matched = True
                break
        if not matched:
            clustered.append([pt])
    return [np.mean(group, axis=0).astype(int) for group in clustered]

grid_points = cluster_points(points)

# Form rectangles from point pairs
cells = []
for p1, p2 in combinations(grid_points, 2):
    x1, y1 = p1
    x2, y2 = p2
    if abs(x1 - x2) > 20 and abs(y1 - y2) > 20:
        x, y = min(x1, x2), min(y1, y2)
        w, h = abs(x1 - x2), abs(y1 - y2)
        cells.append((x, y, w, h))

# Draw cell boxes
image_with_cells = image.copy()
for i, (x, y, w, h) in enumerate(sorted(cells, key=lambda b: (b[1], b[0]))):
    cv2.rectangle(image_with_cells, (x, y), (x + w, y + h), (0, 0, 255), 1)
    print(f"Cell {i+1}: x={x}, y={y}, w={w}, h={h}")

# Save output
cv2.imwrite('C:/Users/Lenovo/Pictures/opt/all_cells_with_header_1.png', image_with_cells)
